(function() {
  var StatusBarElement;

  StatusBarElement = require('../lib/status-bar-view');

  describe("StatusBarElement", function() {
    var TestItem, statusBarElement;
    statusBarElement = null;
    TestItem = (function() {
      function TestItem(id) {
        this.id = id;
      }

      return TestItem;

    })();
    beforeEach(function() {
      statusBarElement = new StatusBarElement().initialize();
      return atom.views.addViewProvider(TestItem, function(model) {
        var element;
        element = document.createElement("item-view");
        element.model = model;
        return element;
      });
    });
    describe("::addLeftTile({item, priority})", function() {
      it("appends the view for the given item to its left side", function() {
        var leftPanel, testItem1, testItem2, testItem3, tile1, tile2, tile3;
        testItem1 = new TestItem(1);
        testItem2 = new TestItem(2);
        testItem3 = new TestItem(3);
        tile1 = statusBarElement.addLeftTile({
          item: testItem1,
          priority: 10
        });
        tile2 = statusBarElement.addLeftTile({
          item: testItem2,
          priority: 30
        });
        tile3 = statusBarElement.addLeftTile({
          item: testItem3,
          priority: 20
        });
        leftPanel = statusBarElement.leftPanel;
        expect(leftPanel.children[0].nodeName).toBe("ITEM-VIEW");
        expect(leftPanel.children[1].nodeName).toBe("ITEM-VIEW");
        expect(leftPanel.children[2].nodeName).toBe("ITEM-VIEW");
        expect(leftPanel.children[0].model).toBe(testItem1);
        expect(leftPanel.children[1].model).toBe(testItem3);
        expect(leftPanel.children[2].model).toBe(testItem2);
        expect(statusBarElement.getLeftTiles()).toEqual([tile1, tile3, tile2]);
        expect(tile1.getPriority()).toBe(10);
        return expect(tile1.getItem()).toBe(testItem1);
      });
      it("allows the view to be removed", function() {
        var testItem, tile;
        testItem = new TestItem(1);
        tile = statusBarElement.addLeftTile({
          item: testItem,
          priority: 10
        });
        tile.destroy();
        expect(statusBarElement.leftPanel.children.length).toBe(0);
        return statusBarElement.addLeftTile({
          item: testItem,
          priority: 9
        });
      });
      return describe("when no priority is given", function() {
        return it("appends the item", function() {
          var leftPanel, testItem1, testItem2;
          testItem1 = new TestItem(1);
          testItem2 = new TestItem(2);
          statusBarElement.addLeftTile({
            item: testItem1,
            priority: 1000
          });
          statusBarElement.addLeftTile({
            item: testItem2
          });
          leftPanel = statusBarElement.leftPanel;
          expect(leftPanel.children[0].model).toBe(testItem1);
          return expect(leftPanel.children[1].model).toBe(testItem2);
        });
      });
    });
    return describe("::addRightTile({item, priority})", function() {
      it("appends the view for the given item to its right side", function() {
        var rightPanel, testItem1, testItem2, testItem3, tile1, tile2, tile3;
        testItem1 = new TestItem(1);
        testItem2 = new TestItem(2);
        testItem3 = new TestItem(3);
        tile1 = statusBarElement.addRightTile({
          item: testItem1,
          priority: 10
        });
        tile2 = statusBarElement.addRightTile({
          item: testItem2,
          priority: 30
        });
        tile3 = statusBarElement.addRightTile({
          item: testItem3,
          priority: 20
        });
        rightPanel = statusBarElement.rightPanel;
        expect(rightPanel.children[0].nodeName).toBe("ITEM-VIEW");
        expect(rightPanel.children[1].nodeName).toBe("ITEM-VIEW");
        expect(rightPanel.children[2].nodeName).toBe("ITEM-VIEW");
        expect(rightPanel.children[0].model).toBe(testItem2);
        expect(rightPanel.children[1].model).toBe(testItem3);
        expect(rightPanel.children[2].model).toBe(testItem1);
        expect(statusBarElement.getRightTiles()).toEqual([tile2, tile3, tile1]);
        expect(tile1.getPriority()).toBe(10);
        return expect(tile1.getItem()).toBe(testItem1);
      });
      it("allows the view to be removed", function() {
        var disposable, testItem;
        testItem = new TestItem(1);
        disposable = statusBarElement.addRightTile({
          item: testItem,
          priority: 10
        });
        disposable.destroy();
        expect(statusBarElement.rightPanel.children.length).toBe(0);
        return statusBarElement.addRightTile({
          item: testItem,
          priority: 11
        });
      });
      return describe("when no priority is given", function() {
        return it("prepends the item", function() {
          var rightPanel, testItem1, testItem2;
          testItem1 = new TestItem(1, {
            priority: 1000
          });
          testItem2 = new TestItem(2);
          statusBarElement.addRightTile({
            item: testItem1,
            priority: 1000
          });
          statusBarElement.addRightTile({
            item: testItem2
          });
          rightPanel = statusBarElement.rightPanel;
          expect(rightPanel.children[0].model).toBe(testItem2);
          return expect(rightPanel.children[1].model).toBe(testItem1);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvcnNvdG8vLmF0b20vcGFja2FnZXMvc3RhdHVzLWJhci9zcGVjL3N0YXR1cy1iYXItZWxlbWVudC1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSxnQkFBQTs7QUFBQSxFQUFBLGdCQUFBLEdBQW1CLE9BQUEsQ0FBUSx3QkFBUixDQUFuQixDQUFBOztBQUFBLEVBRUEsUUFBQSxDQUFTLGtCQUFULEVBQTZCLFNBQUEsR0FBQTtBQUMzQixRQUFBLDBCQUFBO0FBQUEsSUFBQSxnQkFBQSxHQUFtQixJQUFuQixDQUFBO0FBQUEsSUFFTTtBQUNTLE1BQUEsa0JBQUUsRUFBRixHQUFBO0FBQU8sUUFBTixJQUFDLENBQUEsS0FBQSxFQUFLLENBQVA7TUFBQSxDQUFiOztzQkFBQTs7UUFIRixDQUFBO0FBQUEsSUFLQSxVQUFBLENBQVcsU0FBQSxHQUFBO0FBQ1QsTUFBQSxnQkFBQSxHQUF1QixJQUFBLGdCQUFBLENBQUEsQ0FBa0IsQ0FBQyxVQUFuQixDQUFBLENBQXZCLENBQUE7YUFFQSxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQVgsQ0FBMkIsUUFBM0IsRUFBcUMsU0FBQyxLQUFELEdBQUE7QUFDbkMsWUFBQSxPQUFBO0FBQUEsUUFBQSxPQUFBLEdBQVUsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsV0FBdkIsQ0FBVixDQUFBO0FBQUEsUUFDQSxPQUFPLENBQUMsS0FBUixHQUFnQixLQURoQixDQUFBO2VBRUEsUUFIbUM7TUFBQSxDQUFyQyxFQUhTO0lBQUEsQ0FBWCxDQUxBLENBQUE7QUFBQSxJQWFBLFFBQUEsQ0FBUyxpQ0FBVCxFQUE0QyxTQUFBLEdBQUE7QUFDMUMsTUFBQSxFQUFBLENBQUcsc0RBQUgsRUFBMkQsU0FBQSxHQUFBO0FBQ3pELFlBQUEsK0RBQUE7QUFBQSxRQUFBLFNBQUEsR0FBZ0IsSUFBQSxR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

//# sourceURL=/home/rsoto/.atom/packages/status-bar/spec/status-bar-element-spec.coffee
