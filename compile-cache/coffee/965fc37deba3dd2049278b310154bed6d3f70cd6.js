(function() {
  var ShowTodo, TodoModel, TodoRegex, path, sample1Path;

  path = require('path');

  TodoModel = require('../lib/todo-model');

  ShowTodo = require('../lib/show-todo');

  TodoRegex = require('../lib/todo-regex');

  sample1Path = path.join(__dirname, 'fixtures/sample1');

  describe("Todo Model", function() {
    var match, todoRegex, _ref;
    _ref = [], match = _ref.match, todoRegex = _ref.todoRegex;
    beforeEach(function() {
      atom.project.setPaths([sample1Path]);
      todoRegex = new TodoRegex(ShowTodo.config.findUsingRegex["default"], ['FIXME', 'TODO']);
      return match = {
        all: " TODO: Comment in C #tag1 ",
        loc: "" + (atom.project.getPaths()[0]) + "/sample1/sample.c",
        regex: todoRegex.regex,
        regexp: todoRegex.regexp,
        position: [[0, 1], [0, 20]]
      };
    });
    describe("Create todo models", function() {
      it("should handle results from workspace scan (also tested in fetchRegexItem)", function() {
        var model;
        delete match.regexp;
        model = new TodoModel(match);
        return expect(model.text).toEqual("TODO: Comment in C");
      });
      it("should remove regex part", function() {
        var model;
        model = new TodoModel(match);
        return expect(model.text).toEqual("Comment in C");
      });
      it("should serialize range, relativize path and extract basename", function() {
        var model;
        model = new TodoModel(match);
        expect(model.path).toEqual('sample1/sample.c');
        expect(model.file).toEqual('sample.c');
        return expect(model.range).toEqual('0,1,0,20');
      });
      it("should handle invalid match position", function() {
        var model;
        delete match.position;
        model = new TodoModel(match);
        expect(model.range).toEqual('0,0');
        expect(model.position).toEqual([[0, 0]]);
        match.position = [];
        model = new TodoModel(match);
        expect(model.range).toEqual('0,0');
        expect(model.position).toEqual([[0, 0]]);
        match.position = [[0, 1]];
        model = new TodoModel(match);
        expect(model.range).toEqual('0,1');
        expect(model.position).toEqual([[0, 1]]);
        match.position = [[0, 1], [2, 3]];
        model = new TodoModel(match);
        expect(model.range).toEqual('0,1,2,3');
        return expect(model.position).toEqual([[0, 1], [2, 3]]);
      });
      it("should handle invalid match position with no matchText", function() {
        var model;
        match.all = "TODO";
        delete match.position;
        model = new TodoModel(match);
        expect(model.text).toEqual('No details');
        expect(model.range).toEqual('0,0');
        expect(model.position).toEqual([[0, 0]]);
        match.position = [];
        model = new TodoModel(match);
        expect(model.range).toEqual('0,0');
        expect(model.position).toEqual([[0, 0]]);
        match.position = true;
        model = new TodoModel(match);
        expect(model.range).toEqual('0,0');
        return expect(model.position).toEqual([[0, 0]]);
      });
      it("should handle dot after todo", function() {
        var model;
        match.all = "// TODO. comment";
        model = new TodoModel(match);
        return expect(model.text).toBe('comment');
      });
      it("should handle semicolon after todo", function() {
        var model;
        match.all = "// TODO; comment";
        model = new TodoModel(match);
        return expect(model.text).toBe('comment');
      });
      it('respects imdone syntax', function() {
        var model;
        match.all = "// TODO:10 todo1";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('todo1');
      });
      it('respects imdone syntax zero', function() {
        var model;
        match.all = "// TODO:0 todo2";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('todo2');
      });
      it('handles number in todo', function() {
        var model;
        match.all = "Line 1 //TODO: 1 2 3";
        model = new TodoModel(match);
        return expect(model.text).toBe('1 2 3');
      });
      it('handles number in todo (as long as its not without space)', function() {
        var model;
        match.all = "Line 2 //TODO:1 2 3";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('2 3');
      });
      it('handles empty todos', function() {
        var model;
        match.all = "Line 1 //TODO";
        match.position = [[0, 9], [0, 13]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 1');
      });
      it('handles empty todos with other comment characters', function() {
        var model;
        match.all = "Line 2 # TODO";
        match.position = [[0, 9], [0, 13]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 2');
      });
      it('handles empty todos with separator', function() {
        var model;
        match.all = "Line 3 // TODO.";
        match.position = [[0, 9], [0, 14]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 3');
      });
      it('handles empty todos with colon separator', function() {
        var model;
        match.all = "Line 4 // TODO:";
        match.position = [[0, 10], [0, 14]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 4');
      });
      it('handles empty block todos', function() {
        var model;
        match.all = "Line 5 /* TODO */ ";
        match.position = [[0, 9], [0, 19]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 5');
      });
      it('handles completely empty todos', function() {
        var model;
        match.all = "// TODO";
        match.position = [[0, 2], [0, 7]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('No details');
      });
      it('handles completely empty todos with separator', function() {
        var model;
        match.all = "// TODO.";
        match.position = [[0, 2], [0, 8]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('No details');
      });
      it('handles completely empty block todos', function() {
        var model;
        match.all = " /* TODO */ ";
        match.position = [[0, 3], [0, 12]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('No details');
      });
      it('handles todos with @ in front', function() {
        var model;
        match.all = "Line 1 // @TODO: text 1";
        model = new TodoModel(match);
        return expect(model.text).toBe('text 1');
      });
      it('handles todos with @ in front', function() {
        var model;
        match.all = "Line 2 @TODO: text 2";
        model = new TodoModel(match);
        return expect(model.text).toBe('text 2');
      });
      it('handles tabs in todos', function() {
        var model;
        match.all = "Line //TODO:\ttext";
        model = new TodoModel(match);
        return expect(model.text).toBe('text');
      });
      it('handles todo without semicolon', function() {
        var model;
        match.all = "A line // TODO text";
        model = new TodoModel(match);
        return expect(model.text).toBe('text');
      });
      it('stops with invalid todos', function() {
        var model, text;
        text = "A line // TODO:text";
        match.all = text;
        model = new TodoModel(match);
        expect(model.type).toBe(void 0);
        return expect(model.text).toBe(text);
      });
      it('extracts project name', function() {
        var model;
        model = new TodoModel(match);
        return expect(model.project).toBe('sample1');
      });
      it('handles non-existing projects', function() {
        var model;
        atom.project.setPaths([]);
        model = new TodoModel(match);
        expect(model.project).toBe('');
        expect(model.file).toBe('sample.c');
        return expect(model.path).toBe(match.loc);
      });
      return it('handles files not in project', function() {
        var model;
        match.loc = 'nonexisting/sample.c';
        model = new TodoModel(match);
        expect(model.project).toBe('');
        expect(model.file).toBe('sample.c');
        return expect(model.path).toBe(match.loc);
      });
    });
    describe("Extracting todo tags", function() {
      it("should extract todo tags", function() {
        var model;
        match.text = "test #TODO: 123 #tag1";
        model = new TodoModel(match);
        expect(model.tags).toBe('tag1');
        expect(model.text).toBe('123');
        match.text = "#TODO: 123 #tag1.";
        expect(new TodoModel(match).tags).toBe('tag1');
        match.text = "  TODO: 123 #tag1  ";
        model = new TodoModel(match);
        expect(model.tags).toBe('tag1');
        expect(model.text).toBe('123');
        match.text = "<!-- TODO: 123 #tag1   --> ";
        model = new TodoModel(match);
        expect(model.tags).toBe('tag1');
        expect(model.text).toBe('123');
        match.text = "<!-- TODO: Fix this link. #bug. -->";
        model = new TodoModel(match);
        expect(model.tags).toBe('bug');
        return expect(model.text).toBe('Fix this link.');
      });
      it("should extract multiple todo tags", function() {
        var model;
        match.text = "TODO: 123 #tag1 #tag2 #tag3";
        model = new TodoModel(match);
        expect(model.tags).toBe('tag1, tag2, tag3');
        expect(model.text).toBe('123');
        match.text = "test #TODO: 123 #tag1, #tag2";
        expect(new TodoModel(match).tags).toBe('tag1, tag2');
        match.text = "TODO: #123 #tag1";
        model = new TodoModel(match);
        expect(model.tags).toBe('123, tag1');
        return expect(model.text).toBe('No details');
      });
      return it("should handle invalid tags", function() {
        match.text = "#TODO: 123 #tag1 X";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: 123 #tag1#";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: #tag1 todo";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: #tag.123";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: #tag1 #tag2@";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: #tag1, #tag2$, #tag3";
        return expect(new TodoModel(match).tags).toBe('tag3');
      });
    });
    describe("Handling google style guide todo syntax", function() {
      it("adds an id to the model", function() {
        var model;
        match.all = "// TODO(kl@gmail.com): Use a *.";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        expect(model.id).toBe('kl@gmail.com');
        return expect(model.text).toBe('Use a *.');
      });
      it("handles plain name", function() {
        var model;
        match.all = "// TODO(Zeke) change this to use relations.";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        expect(model.id).toBe('Zeke');
        return expect(model.text).toBe('change this to use relations.');
      });
      it("handles spaces", function() {
        var model;
        match.all = "// TODO(bug 12345): remove the \"Last visitors\" feature";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        expect(model.id).toBe('bug 12345');
        return expect(model.text).toBe('remove the "Last visitors" feature');
      });
      it("handles parentheses in text", function() {
        var model;
        match.all = "// TODO(bug): another task (seriously)";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        expect(model.id).toBe('bug');
        return expect(model.text).toBe('another task (seriously)');
      });
      it("handles long ids with empty todos", function() {
        var model;
        match.all = "// TODO(id: Use a *.)";
        match.position = [[0, 2], [0, 21]];
        model = new TodoModel(match);
        expect(model.id).toBe('id: Use a *.');
        return expect(model.text).toBe('No details');
      });
      it("handles invalid todo id format", function() {
        var model;
        match.all = "// TODO(id: Use a *.";
        model = new TodoModel(match);
        expect(model.id).toBe('');
        return expect(model.text).toBe('(id: Use a *.');
      });
      it("handles invalid id with underscore", function() {
        var model;
        match.all = "// TODO _(id): Use a *.";
        model = new TodoModel(match);
        expect(model.id).toBe('');
        return expect(model.text).toBe('_(id): Use a *.');
      });
      return it("handles invalid id with space", function() {
        var model;
        match.all = "// TODO (id): Use a *.";
        model = new TodoModel(match);
        expect(model.id).toBe('');
        return expect(model.text).toBe('(id): Use a *.');
      });
    });
    return describe("Model properties", function() {
      it("returns value for key", function() {
        var model;
        model = new TodoModel(match);
        expect(model.get('All')).toBe(match.all);
        expect(model.get('Text')).toBe('Comment in C');
        expect(model.get('Type')).toBe('TODO');
        expect(model.get('Range')).toBe('0,1,0,20');
        expect(model.get('Line')).toBe('1');
        expect(model.get('Regex')).toBe('/\\b(TODO)[:;.,]?\\d*($|\\s.*$|\\(.*$)/g');
        expect(model.get('Path')).toBe('sample1/sample.c');
        expect(model.get('File')).toBe('sample.c');
        expect(model.get('Tags')).toBe('tag1');
        expect(model.get('Id')).toBe('');
        expect(model.get('Project')).toBe('sample1');
        return expect(model.get('RegExp')).toBe(match.regexp);
      });
      it("defaults to text", function() {
        var model;
        model = new TodoModel(match);
        expect(model.get()).toBe('Comment in C');
        expect(model.get('NONEXISTING')).toBe('Comment in C');
        delete match.all;
        delete match.text;
        model = new TodoModel(match);
        expect(model.get()).toBe('No details');
        delete model.all;
        delete model.text;
        return expect(model.get()).toBe('No details');
      });
      return it("searches for strings", function() {
        var model;
        model = new TodoModel(match);
        expect(model.contains('Comment')).toBe(true);
        expect(model.contains('TODO')).toBe(false);
        atom.config.set('todo-show.showInTable', ['Text', 'Type', 'Line']);
        model = new TodoModel(match);
        expect(model.contains('Comment')).toBe(true);
        expect(model.contains('TODO')).toBe(true);
        expect(model.contains('1')).toBe(true);
        expect(model.contains('sample.c')).toBe(false);
        expect(model.contains('0,1')).toBe(false);
        expect(model.contains('')).toBe(true);
        return expect(model.contains()).toBe(true);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvcnNvdG8vLmF0b20vcGFja2FnZXMvdG9kby1zaG93L3NwZWMvdG9kby1tb2RlbC1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSxpREFBQTs7QUFBQSxFQUFBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQUFQLENBQUE7O0FBQUEsRUFFQSxTQUFBLEdBQVksT0FBQSxDQUFRLG1CQUFSLENBRlosQ0FBQTs7QUFBQSxFQUdBLFFBQUEsR0FBVyxPQUFBLENBQVEsa0JBQVIsQ0FIWCxDQUFBOztBQUFBLEVBSUEsU0FBQSxHQUFZLE9BQUEsQ0FBUSxtQkFBUixDQUpaLENBQUE7O0FBQUEsRUFNQSxXQUFBLEdBQWMsSUFBSSxDQUFDLElBQUwsQ0FBVSxTQUFWLEVBQXFCLGtCQUFyQixDQU5kLENBQUE7O0FBQUEsRUFRQSxRQUFBLENBQVMsWUFBVCxFQUF1QixTQUFBLEdBQUE7QUFDckIsUUFBQSxzQkFBQTtBQUFBLElBQUEsT0FBcUIsRUFBckIsRUFBQyxhQUFBLEtBQUQsRUFBUSxpQkFBQSxTQUFSLENBQUE7QUFBQSxJQUVBLFVBQUEsQ0FBVyxTQUFBLEdBQUE7QUFDVCxNQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBYixDQUFzQixDQUFDLFdBQUQsQ0FBdEIsQ0FBQSxDQUFBO0FBQUEsTUFDQSxTQUFBLEdBQWdCLElBQUEsU0FBQSxDQUNkLFFBQVEsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQUQsQ0FEaEIsRUFFZCxDQUFDLE9BQUQsRUFBVSxNQUFWLENBRmMsQ0FEaEIsQ0FBQTthQU1BLEtBQUEsR0FDRTtBQUFBLFFBQUEsR0FBQSxFQUFLLDRCQUFMO0FBQUEsUUFDQSxHQUFBLEVBQUssRUFBQSxHQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFiLENBQUEsQ0FBd0IsQ0FBQSxD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

//# sourceURL=/home/rsoto/.atom/packages/todo-show/spec/todo-model-spec.coffee
