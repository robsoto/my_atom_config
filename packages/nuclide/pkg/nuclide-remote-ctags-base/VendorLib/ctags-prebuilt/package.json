{
  "name": "ctags-prebuilt",
  "description": "A package for reading source code tag files prebuilt for Mac and Linux",
  "version": "0.2.0",
  "keywords": [
    "tags",
    "etags"
  ],
  "license": "MIT",
  "author": {
    "name": "Andres Suarez",
    "email": "zertosh@gmail.com"
  },
  "files": [
    "build/ctags",
    "lib"
  ],
  "main": "lib/ctags.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zertosh/ctags-prebuilt.git"
  },
  "scripts": {
    "preinstall": "node -e 'process.exit(0)'",
    "test": "jasmine-node --captureExceptions spec",
    "clean": "rm -rf build",
    "rebuild": "node-pre-gyp clean rebuild --build-from-source",
    "prepublish": "node tools/prepublish.js"
  },
  "dependencies": {
    "pre-binding": "^1.1.0"
  },
  "devDependencies": {
    "jasmine-node": "^1.14.5",
    "nan": "^2.0.0",
    "node-pre-gyp": "^0.6.5",
    "rimraf": "^2.5.1"
  },
  "binary": {
    "module_name": "ctags",
    "module_path": "./build/{module_name}/v{version}/{node_abi}-{platform}-{arch}/",
    "host": "https://github.com/",
    "remote_path": "./zertosh/{module_name}-prebuilt/releases/download/v{version}/",
    "package_name": "{node_abi}-{platform}-{arch}.tar.gz"
  },
  "readme": "# ctags-prebuilt\n\n[![Build Status](https://travis-ci.org/zertosh/ctags-prebuilt.svg?branch=master)](https://travis-ci.org/zertosh/ctags-prebuilt)\n\nSelf-sufficient fork of [node-tags](https://travis-ci.org/atom/node-ctags) prebuilt for Mac and Linux. Read all about ctags [here](http://ctags.sourceforge.net/).\n\n## About\n\n`ctags-prebuilt` includes prebuilt binaries of [node-tags](https://travis-ci.org/atom/node-ctags) for Mac and Linux for major versions of node.js and io.js. It's meant for use in [Atom packages](https://atom.io/packages) where your end-user might not have a proper build toolchain.\n\nThis module isn't meant to be built by the end-user. It doesn't include the necessary files for it.\n\n## Building\n\n```\n$ npm version patch\n$ git push --follow-tags\n# wait for travis to build\n$ npm publish\n```\n\n## Installing\n\n```sh\nnpm install ctags-prebuilt\n```\n\n## Usage in Atom Packages\n\nAtom looks in a package's `node_modules` for `.node` files to check for compatibility. Since `ctags-prebuilt` bundles different binaries that are not compatible with your target platform, it's important that you *copy* this library into package directory, instead of including in `dependencies`.\n\n## Documentation\n\n### findTags(tagsFilePath, tag, [options], callback)\n\nGet all tags matching the tag specified from the tags file at the path.\n\n* `tagsFilePath` - The string path to the tags file.\n\n* `tag` - The string name of the tag to search for.\n\n* `options` - An optional options object containing the following keys:\n\n  * `caseInsensitive` - `true` to include tags that match case insensitively,\n    (default: `false`)\n  * `partialMatch` - `true` to include tags that partially match the given tag\n    (default: `false`)\n  * `limit` - maximum number of matches to return. Should be a positive integer.\n    (default: unlimited)\n\n* `callback` - The function to call when complete with an error as the first\n             argument and an array containing tag objects. Each tag object contains:\n\n  * `name` - name of the tag\n  * `file` - location of the tag\n  * `kind` - kind of the tag (see `ctags --list-kinds`)\n  * `lineNumber` - line number of the tag in `file` (defaults to 0 if not provided)\n  * `pattern` (optional) - pattern to search for in `file` (only if provided in tag file)\n  * `fields` (optional) - object with string values; extra fields for the tag (only if provided in tag file)\n\n#### Example\n\n```js\nconst ctags = require('ctags');\n\nctags.findTags('/Users/me/repos/node/tags', 'exists', (error, tags=[]) => {\n  for (tag of tags) {\n    console.log(`${tag.name} is in ${tag.file}`);\n  }\n});\n```\n\n### createReadStream(tagsFilePath, [options])\n\nCreate a read stream to a tags file.\n\nThe stream returned will emit `data` events with arrays of tag objects\nthat have `name` and `file` keys and optionally a `pattern` key if the tag file\nspecified contains tag patterns.\n\nAn `error` event will be emitted if the tag file cannot be read.\n\nAn `end` event will be emitted when all the tags have been read.\n\n* `tagsFilePath` - The string path to the tags file.\n\n* `options` - An optional object containing the following keys.\n\n  * `chunkSize` - The number of tags to read at a time (default: `100`).\n\nReturns a stream.\n\n#### Example\n\n```js\nconst ctags = require('ctags');\n\nconst stream = ctags.createReadStream('/Users/me/repos/node/tags');\nstream.on('data', (tags) => {\n  for (tag of tags) {\n    console.log(`${tag.name} is in ${tag.file} with pattern: ${tag.pattern}`);\n  }\n});\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "69d942630c4a7c1157c5ba577da31efa99ed3cb8",
  "bugs": {
    "url": "https://github.com/zertosh/ctags-prebuilt/issues"
  },
  "homepage": "https://github.com/zertosh/ctags-prebuilt#readme",
  "bundleDependencies": [
    "pre-binding"
  ],
  "_id": "ctags-prebuilt@0.2.0",
  "_shasum": "a150f1e4ff3b61c2db33bc0d202ae86aa2948ef7",
  "_from": "ctags-prebuilt@latest"
}
